{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "/*\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS-IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/**\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/long.js for details\n */\n(function(global, factory) {\n\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\n        define([], factory);\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\n        module[\"exports\"] = factory();\n    /* Global */ else\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\n\n})(this, function() {\n    \"use strict\";\n\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     * @exports Long\n     * @class A Long class for representing a 64 bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long\n     * @param {number} high The high (signed) 32 bits of the long\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @constructor\n     */\n    function Long(low, high, unsigned) {\n\n        /**\n         * The low 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.low = low | 0;\n\n        /**\n         * The high 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.high = high | 0;\n\n        /**\n         * Whether unsigned or not.\n         * @type {boolean}\n         * @expose\n         */\n        this.unsigned = !!unsigned;\n    }\n\n    // The internal representation of a long is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // Javascript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within Javascript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n\n    /**\n     * An indicator used to reliably determine if an object is a Long or not.\n     * @type {boolean}\n     * @const\n     * @expose\n     * @private\n     */\n    Long.prototype.__isLong__;\n\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n        value: true,\n        enumerable: false,\n        configurable: false\n    });\n\n    /**\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @inner\n     */\n    function isLong(obj) {\n        return (obj && obj[\"__isLong__\"]) === true;\n    }\n\n    /**\n     * Tests if the specified object is a Long.\n     * @function\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @expose\n     */\n    Long.isLong = isLong;\n\n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var INT_CACHE = {};\n\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var UINT_CACHE = {};\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromInt(value, unsigned) {\n        var obj, cachedObj, cache;\n        if (unsigned) {\n            value >>>= 0;\n            if (cache = (0 <= value && value < 256)) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache)\n                UINT_CACHE[value] = obj;\n            return obj;\n        } else {\n            value |= 0;\n            if (cache = (-128 <= value && value < 128)) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\n            if (cache)\n                INT_CACHE[value] = obj;\n            return obj;\n        }\n    }\n\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @function\n     * @param {number} value The 32 bit integer in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromInt = fromInt;\n\n    /**\n     * @param {number} value\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromNumber(value, unsigned) {\n        if (isNaN(value) || !isFinite(value))\n            return unsigned ? UZERO : ZERO;\n        if (unsigned) {\n            if (value < 0)\n                return UZERO;\n            if (value >= TWO_PWR_64_DBL)\n                return MAX_UNSIGNED_VALUE;\n        } else {\n            if (value <= -TWO_PWR_63_DBL)\n                return MIN_VALUE;\n            if (value + 1 >= TWO_PWR_63_DBL)\n                return MAX_VALUE;\n        }\n        if (value < 0)\n            return fromNumber(-value, unsigned).neg();\n        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n    }\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @function\n     * @param {number} value The number in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromNumber = fromNumber;\n\n    /**\n     * @param {number} lowBits\n     * @param {number} highBits\n     * @param {boolean=} unsigned\n     * @returns {!Long}\n     * @inner\n     */\n    function fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    }\n\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @function\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromBits = fromBits;\n\n    /**\n     * @function\n     * @param {number} base\n     * @param {number} exponent\n     * @returns {number}\n     * @inner\n     */\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n    /**\n     * @param {string} str\n     * @param {(boolean|number)=} unsigned\n     * @param {number=} radix\n     * @returns {!Long}\n     * @inner\n     */\n    function fromString(str, unsigned, radix) {\n        if (str.length === 0)\n            throw Error('empty string');\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n            return ZERO;\n        if (typeof unsigned === 'number') {\n            // For goog.math.long compatibility\n            radix = unsigned,\n            unsigned = false;\n        } else {\n            unsigned = !! unsigned;\n        }\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw RangeError('radix');\n\n        var p;\n        if ((p = str.indexOf('-')) > 0)\n            throw Error('interior hyphen');\n        else if (p === 0) {\n            return fromString(str.substring(1), unsigned, radix).neg();\n        }\n\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n        var result = ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i),\n                value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = fromNumber(pow_dbl(radix, size));\n                result = result.mul(power).add(fromNumber(value));\n            } else {\n                result = result.mul(radixToPower);\n                result = result.add(fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    }\n\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * @function\n     * @param {string} str The textual representation of the Long\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromString = fromString;\n\n    /**\n     * @function\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n     * @returns {!Long}\n     * @inner\n     */\n    function fromValue(val) {\n        if (val /* is compatible */ instanceof Long)\n            return val;\n        if (typeof val === 'number')\n            return fromNumber(val);\n        if (typeof val === 'string')\n            return fromString(val);\n        // Throws for non-objects, converts non-instanceof Long:\n        return fromBits(val.low, val.high, val.unsigned);\n    }\n\n    /**\n     * Converts the specified value to a Long.\n     * @function\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n     * @returns {!Long}\n     * @expose\n     */\n    Long.fromValue = fromValue;\n\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_16_DBL = 1 << 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24_DBL = 1 << 24;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n    /**\n     * @type {!Long}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ZERO = fromInt(0);\n\n    /**\n     * Signed zero.\n     * @type {!Long}\n     * @expose\n     */\n    Long.ZERO = ZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UZERO = fromInt(0, true);\n\n    /**\n     * Unsigned zero.\n     * @type {!Long}\n     * @expose\n     */\n    Long.UZERO = UZERO;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var ONE = fromInt(1);\n\n    /**\n     * Signed one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.ONE = ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var UONE = fromInt(1, true);\n\n    /**\n     * Unsigned one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.UONE = UONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var NEG_ONE = fromInt(-1);\n\n    /**\n     * Signed negative one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.NEG_ONE = NEG_ONE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\n\n    /**\n     * Maximum signed value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_VALUE = MAX_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\n\n    /**\n     * Maximum unsigned value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n    /**\n     * @type {!Long}\n     * @inner\n     */\n    var MIN_VALUE = fromBits(0, 0x80000000|0, false);\n\n    /**\n     * Minimum signed value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_VALUE = MIN_VALUE;\n\n    /**\n     * @alias Long.prototype\n     * @inner\n     */\n    var LongPrototype = Long.prototype;\n\n    /**\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.toInt = function toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n\n    /**\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.toNumber = function toNumber() {\n        if (this.unsigned)\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     * @expose\n     */\n    LongPrototype.toString = function toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw RangeError('radix');\n        if (this.isZero())\n            return '0';\n        if (this.isNegative()) { // Unsigned Longs are never negative\n            if (this.eq(MIN_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = fromNumber(radix),\n                    div = this.div(radixLong),\n                    rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            } else\n                return '-' + this.neg().toString(radix);\n        }\n\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n            rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower),\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n                digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero())\n                return digits + result;\n            else {\n                while (digits.length < 6)\n                    digits = '0' + digits;\n                result = '' + digits + result;\n            }\n        }\n    };\n\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @returns {number} Signed high bits\n     * @expose\n     */\n    LongPrototype.getHighBits = function getHighBits() {\n        return this.high;\n    };\n\n    /**\n     * Gets the high 32 bits as an unsigned integer.\n     * @returns {number} Unsigned high bits\n     * @expose\n     */\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n        return this.high >>> 0;\n    };\n\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @returns {number} Signed low bits\n     * @expose\n     */\n    LongPrototype.getLowBits = function getLowBits() {\n        return this.low;\n    };\n\n    /**\n     * Gets the low 32 bits as an unsigned integer.\n     * @returns {number} Unsigned low bits\n     * @expose\n     */\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n        return this.low >>> 0;\n    };\n\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Long.\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n        if (this.isNegative()) // Unsigned Longs are never negative\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        var val = this.high != 0 ? this.high : this.low;\n        for (var bit = 31; bit > 0; bit--)\n            if ((val & (1 << bit)) != 0)\n                break;\n        return this.high != 0 ? bit + 33 : bit + 1;\n    };\n\n    /**\n     * Tests if this Long's value equals zero.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isZero = function isZero() {\n        return this.high === 0 && this.low === 0;\n    };\n\n    /**\n     * Tests if this Long's value is negative.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isNegative = function isNegative() {\n        return !this.unsigned && this.high < 0;\n    };\n\n    /**\n     * Tests if this Long's value is positive.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isPositive = function isPositive() {\n        return this.unsigned || this.high >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is odd.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isOdd = function isOdd() {\n        return (this.low & 1) === 1;\n    };\n\n    /**\n     * Tests if this Long's value is even.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isEven = function isEven() {\n        return (this.low & 1) === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.equals = function equals(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n            return false;\n        return this.high === other.high && this.low === other.low;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.eq = LongPrototype.equals;\n\n    /**\n     * Tests if this Long's value differs from the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.notEquals = function notEquals(other) {\n        return !this.eq(/* validates */ other);\n    };\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.neq = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lessThan = function lessThan(other) {\n        return this.comp(/* validates */ other) < 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lt = LongPrototype.lessThan;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n        return this.comp(/* validates */ other) <= 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.greaterThan = function greaterThan(other) {\n        return this.comp(/* validates */ other) > 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.gt = LongPrototype.greaterThan;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n        return this.comp(/* validates */ other) >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Compares this Long's value with the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    LongPrototype.compare = function compare(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        if (this.eq(other))\n            return 0;\n        var thisNeg = this.isNegative(),\n            otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg)\n            return -1;\n        if (!thisNeg && otherNeg)\n            return 1;\n        // At this point the sign bits are the same\n        if (!this.unsigned)\n            return this.sub(other).isNegative() ? -1 : 1;\n        // Both are positive if at least one is unsigned\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n    };\n\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    LongPrototype.comp = LongPrototype.compare;\n\n    /**\n     * Negates this Long's value.\n     * @returns {!Long} Negated Long\n     * @expose\n     */\n    LongPrototype.negate = function negate() {\n        if (!this.unsigned && this.eq(MIN_VALUE))\n            return MIN_VALUE;\n        return this.not().add(ONE);\n    };\n\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     * @expose\n     */\n    LongPrototype.neg = LongPrototype.negate;\n\n    /**\n     * Returns the sum of this and the specified Long.\n     * @param {!Long|number|string} addend Addend\n     * @returns {!Long} Sum\n     * @expose\n     */\n    LongPrototype.add = function add(addend) {\n        if (!isLong(addend))\n            addend = fromValue(addend);\n\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = addend.high >>> 16;\n        var b32 = addend.high & 0xFFFF;\n        var b16 = addend.low >>> 16;\n        var b00 = addend.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 + b48;\n        c48 &= 0xFFFF;\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the specified Long.\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     * @expose\n     */\n    LongPrototype.subtract = function subtract(subtrahend) {\n        if (!isLong(subtrahend))\n            subtrahend = fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    };\n\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     * @expose\n     */\n    LongPrototype.sub = LongPrototype.subtract;\n\n    /**\n     * Returns the product of this and the specified Long.\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     * @expose\n     */\n    LongPrototype.multiply = function multiply(multiplier) {\n        if (this.isZero())\n            return ZERO;\n        if (!isLong(multiplier))\n            multiplier = fromValue(multiplier);\n        if (multiplier.isZero())\n            return ZERO;\n        if (this.eq(MIN_VALUE))\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\n        if (multiplier.eq(MIN_VALUE))\n            return this.isOdd() ? MIN_VALUE : ZERO;\n\n        if (this.isNegative()) {\n            if (multiplier.isNegative())\n                return this.neg().mul(multiplier.neg());\n            else\n                return this.neg().mul(multiplier).neg();\n        } else if (multiplier.isNegative())\n            return this.mul(multiplier.neg()).neg();\n\n        // If both longs are small, use float multiplication\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = multiplier.high >>> 16;\n        var b32 = multiplier.high & 0xFFFF;\n        var b16 = multiplier.low >>> 16;\n        var b00 = multiplier.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xFFFF;\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     * @expose\n     */\n    LongPrototype.mul = LongPrototype.multiply;\n\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\n     *  unsigned if this Long is unsigned.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     * @expose\n     */\n    LongPrototype.divide = function divide(divisor) {\n        if (!isLong(divisor))\n            divisor = fromValue(divisor);\n        if (divisor.isZero())\n            throw Error('division by zero');\n        if (this.isZero())\n            return this.unsigned ? UZERO : ZERO;\n        var approx, rem, res;\n        if (!this.unsigned) {\n            // This section is only relevant for signed longs and is derived from the\n            // closure library as a whole.\n            if (this.eq(MIN_VALUE)) {\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n                else if (divisor.eq(MIN_VALUE))\n                    return ONE;\n                else {\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                    var halfThis = this.shr(1);\n                    approx = halfThis.div(divisor).shl(1);\n                    if (approx.eq(ZERO)) {\n                        return divisor.isNegative() ? ONE : NEG_ONE;\n                    } else {\n                        rem = this.sub(divisor.mul(approx));\n                        res = approx.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n            } else if (divisor.eq(MIN_VALUE))\n                return this.unsigned ? UZERO : ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative())\n                    return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            } else if (divisor.isNegative())\n                return this.div(divisor.neg()).neg();\n            res = ZERO;\n        } else {\n            // The algorithm below has not been made for unsigned longs. It's therefore\n            // required to take special care of the MSB prior to running it.\n            if (!divisor.unsigned)\n                divisor = divisor.toUnsigned();\n            if (divisor.gt(this))\n                return UZERO;\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n                return UONE;\n            res = UZERO;\n        }\n\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        rem = this;\n        while (rem.gte(divisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n                approxRes = fromNumber(approx),\n                approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero())\n                approxRes = ONE;\n\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    };\n\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     * @expose\n     */\n    LongPrototype.div = LongPrototype.divide;\n\n    /**\n     * Returns this Long modulo the specified.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     * @expose\n     */\n    LongPrototype.modulo = function modulo(divisor) {\n        if (!isLong(divisor))\n            divisor = fromValue(divisor);\n        return this.sub(this.div(divisor).mul(divisor));\n    };\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     * @expose\n     */\n    LongPrototype.mod = LongPrototype.modulo;\n\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.not = function not() {\n        return fromBits(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.and = function and(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.or = function or(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.xor = function xor(other) {\n        if (!isLong(other))\n            other = fromValue(other);\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n        else\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shl = LongPrototype.shiftLeft;\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n        else\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shr = LongPrototype.shiftRight;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n        if (isLong(numBits))\n            numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0)\n            return this;\n        else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            } else if (numBits === 32)\n                return fromBits(high, 0, this.unsigned);\n            else\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\n        }\n    };\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Converts this Long to signed.\n     * @returns {!Long} Signed long\n     * @expose\n     */\n    LongPrototype.toSigned = function toSigned() {\n        if (!this.unsigned)\n            return this;\n        return fromBits(this.low, this.high, false);\n    };\n\n    /**\n     * Converts this Long to unsigned.\n     * @returns {!Long} Unsigned long\n     * @expose\n     */\n    LongPrototype.toUnsigned = function toUnsigned() {\n        if (this.unsigned)\n            return this;\n        return fromBits(this.low, this.high, true);\n    };\n\n    return Long;\n});\n"
  ]
}