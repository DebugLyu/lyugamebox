{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "ProtoBuf",
    "require",
    "ByteBuffer",
    "LWebSocket",
    "addr",
    "port",
    "address",
    "callback",
    "state",
    "queue",
    "Array",
    "reader",
    "FileReader",
    "working",
    "doMessage",
    "msgdispatch",
    "addEventListener",
    "data",
    "result",
    "ndata",
    "append",
    "flip",
    "len",
    "readShort",
    "head",
    "readString",
    "console",
    "log",
    "dispatch",
    "toBuffer",
    "c",
    "shift",
    "readAsArrayBuffer",
    "self",
    "send",
    "buffer",
    "socket",
    "connect",
    "ws",
    "WebSocket",
    "onopen",
    "event",
    "reSetTimes",
    "env",
    "func",
    "onmessage",
    "push",
    "length",
    "onerror",
    "onclose",
    "reLogin",
    "registerCallback",
    "obj",
    "module",
    "exports"
  ],
  "mappings": ";;AAAA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AACA,IAAIC,aAAaD,QAAQ,YAAR,CAAjB;;AAGA,IAAIE,aAAa,SAAbA,UAAa,CAASC,IAAT,EAAeC,IAAf,EAAoB;AACjC,SAAKC,OAAL,GAAeF,IAAf;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKE,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL,GAAa,CAAb,CAJiC,CAIjB;;AAEhB,QAAIC,QAAQ,IAAIC,KAAJ,EAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,UAAJ,EAAd;;AAEA,QAAIC,UAAU,KAAd;AACA,QAAIC,SAAJ;AACA,QAAIC,cAAcd,QAAQ,aAAR,CAAlB;AACA,SAAKU,MAAL,CAAYK,gBAAZ,CAA6B,SAA7B,EAAwC,YAAW;AAC/C;AACA,YAAIC,OAAO,KAAKC,MAAhB;AACA,YAAIC,QAAQ,IAAIjB,UAAJ,EAAZ;AACAiB,cAAMC,MAAN,CAAcH,IAAd;AACAE,cAAME,IAAN;;AAEA,YAAIC,MAAMH,MAAMI,SAAN,EAAV;AACA,YAAIC,OAAOL,MAAMM,UAAN,CAAiBH,GAAjB,CAAX;AACAI,gBAAQC,GAAR,CAAY,wBAAwBH,IAApC;AACAT,oBAAYa,QAAZ,CAAqBJ,IAArB,EAA2BL,MAAMU,QAAN,EAA3B;AACAhB,kBAAU,KAAV;AACAC;AACH,KAbD;;AAeA,QAAIgB,IAAI,KAAKnB,MAAb;AACAG,gBAAY,qBAAU;AAClB,YAAG,CAACD,OAAJ,EAAY;AACR,gBAAII,OAAOR,MAAM,CAAN,CAAX;AACA,gBAAIQ,QAAQ,IAAZ,EAAiB;AACbJ,0BAAU,IAAV;AACAJ,sBAAMsB,KAAN;AACAD,kBAAEE,iBAAF,CAAoBf,IAApB;AACH;AACJ;AACJ,KATD;;AAWA,QAAIgB,OAAO,IAAX;;AAGA,SAAKC,IAAL,GAAY,UAASC,MAAT,EAAgB;AACxB,aAAKC,MAAL,CAAYF,IAAZ,CAAiBC,MAAjB;AACH,KAFD;;AAIA,SAAKE,OAAL,GAAe,YAAU;AACrBJ,aAAKzB,KAAL,GAAa,CAAb;AACA,YAAI8B,KAAK,IAAIC,SAAJ,CAAc,UAAQN,KAAK3B,OAAb,GAAqB,GAArB,GAAyB2B,KAAK5B,IAA9B,GAAmC,KAAjD,CAAT;AACAiC,WAAGE,MAAH,GAAY,UAAUC,KAAV,EAAiB;AACzBf,oBAAQC,GAAR,CAAY,0BAAZ;AACAM,iBAAKzB,KAAL,GAAa,CAAb;AACAP,oBAAQ,QAAR,EAAkByC,UAAlB;AACA,gBAAGT,KAAK1B,QAAL,IAAiB,IAApB,EAAyB;AACrB0B,qBAAK1B,QAAL,CAAcoC,GAAd,CAAmBV,KAAK1B,QAAL,CAAcqC,IAAjC;AACH;AACDX,iBAAK1B,QAAL,GAAgB,IAAhB;AACH,SARD;AASA+B,WAAGO,SAAH,GAAe,UAAUJ,KAAV,EAAiB;AAC5B;AACAhC,kBAAMqC,IAAN,CAAYL,MAAMxB,IAAlB;AACA,gBAAGR,MAAMsC,MAAN,GAAe,CAAlB,EAAoB;AAChBjC;AACH;AACJ,SAND;AAOAwB,WAAGU,OAAH,GAAa,UAAUP,KAAV,EAAiB;AAC1Bf,oBAAQC,GAAR,CAAY,0BAAZ;AACH,SAFD;AAGAW,WAAGW,OAAH,GAAa,UAAUR,KAAV,EAAiB;AAC1Bf,oBAAQC,GAAR,CAAY,4BAAZ;AACAM,iBAAKzB,KAAL,GAAa,CAAb;AACAP,oBAAQ,QAAR,EAAkBiD,OAAlB;AACH,SAJD;AAKA,aAAKd,MAAL,GAAcE,EAAd;AACH,KA5BD;;AA8BA,SAAKa,gBAAL,GAAwB,UAAUP,IAAV,EAAgBD,GAAhB,EAAqB;AACzC,YAAIS,MAAM,EAACT,KAAIA,GAAL,EAAUC,MAAMA,IAAhB,EAAV;AACAX,aAAK1B,QAAL,GAAgB6C,GAAhB;AACH,KAHD;AAKH,CAjFD;;AAmFAC,OAAOC,OAAP,GAAiBnD,UAAjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "unknown",
  "sourcesContent": [
    "var ProtoBuf = require(\"protobuf\");\nvar ByteBuffer = require(\"bytebuffer\");\n\n\nvar LWebSocket = function(addr, port){\n    this.address = addr;\n    this.port = port;\n    this.callback = null;\n    this.state = 0; // 0 un init 1 unlink 2 linked 3 linking\n\n    var queue = new Array();\n    this.reader = new FileReader();\n\n    var working = false;\n    var doMessage;\n    var msgdispatch = require(\"msgdispatch\");\n    this.reader.addEventListener(\"loadend\", function() {\n        // reader.result contains the contents of blob as a typed array\n        var data = this.result;\n        var ndata = new ByteBuffer();\n        ndata.append( data );\n        ndata.flip();\n\n        var len = ndata.readShort();\n        var head = ndata.readString(len);\n        console.log(\"response text msg: \" + head);\n        msgdispatch.dispatch(head, ndata.toBuffer());\n        working = false;\n        doMessage();\n    });\n\n    var c = this.reader;\n    doMessage = function(){\n        if(!working){\n            var data = queue[0];\n            if (data != null){\n                working = true;\n                queue.shift();\n                c.readAsArrayBuffer(data);\n            }\n        }\n    }\n\n    var self = this;\n    \n\n    this.send = function(buffer){\n        this.socket.send(buffer);\n    };\n\n    this.connect = function(){\n        self.state = 3;\n        var ws = new WebSocket('ws://'+self.address+':'+self.port+'/ws');\n        ws.onopen = function (event) {\n            console.log(\"Send Text WS was opened.\");\n            self.state = 2;\n            require('Common').reSetTimes();\n            if(self.callback != null){\n                self.callback.env[ self.callback.func ]();\n            }\n            self.callback = null;\n        };\n        ws.onmessage = function (event) {\n            // console.log(\"response text msg: \" + event.data);\n            queue.push( event.data );\n            if(queue.length > 0){\n                doMessage();\n            }\n        };\n        ws.onerror = function (event) {\n            console.log(\"Send Text fired an error\");\n        };\n        ws.onclose = function (event) {\n            console.log(\"WebSocket instance closed.\");\n            self.state = 1; \n            require('Common').reLogin();\n        };\n        this.socket = ws;\n    }\n\n    this.registerCallback = function( func, env ){\n        var obj = {env:env, func: func};\n        self.callback = obj;\n    };\n    \n}\n\nmodule.exports = LWebSocket;\n\n// cc.Class({\n//     name: \"Lwebsocket\",\n//     extends: cc.Component,\n//     properties: {\n//     \taddress: \"\",\n//     \tport: 0,\n//     \tsocket: null,\n//     },\n\n//     ctor: function( addr, port ){\n//     \tthis.address = addr;\n//     \tthis.port = port;\n\n//     \tvar ws = new WebSocket('ws://'+addr+':'+port+'/ws');\n//     \tws.onopen = function (event) {\n//             console.log(\"Send Text WS was opened.\");\n//         };\n//         ws.onmessage = function (event) {\n//             console.log(\"response text msg: \" + event.data);\n//             var reader = new FileReader();\n//             reader.addEventListener(\"loadend\", function() {\n//                // reader.result contains the contents of blob as a typed array\n//                var data = this.result;\n//                var ndata = new ByteBuffer();\n//                ndata.append( data );\n//                ndata.flip();\n//                var len = ndata.readShort();\n//                var head = ndata.readString(len);\n//                m.dispatch(head, ndata.toBuffer());\n//             });\n//             reader.readAsArrayBuffer(event.data);\n\n//         };\n//          ws.onerror = function (event) {\n//              console.log(\"Send Text fired an error\");\n//          };\n//          ws.onclose = function (event) {\n//              console.log(\"WebSocket instance closed.\");\n//          };\n//          this.socket = ws;\n//     }\n// })"
  ]
}