{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "ByteBuffer",
    "require",
    "ProtoBuf",
    "SocketState",
    "UnInit",
    "Linking",
    "Linked",
    "Close",
    "lwebsocket",
    "cc",
    "Class",
    "extends",
    "Component",
    "statics",
    "ip",
    "port",
    "reader",
    "socket",
    "state",
    "msgdispatch",
    "queue",
    "working",
    "init",
    "self",
    "FileReader",
    "addEventListener",
    "data",
    "result",
    "buffer",
    "append",
    "flip",
    "len",
    "readShort",
    "head",
    "readString",
    "console",
    "log",
    "dispatch",
    "toBuffer",
    "domessage",
    "Array",
    "shift",
    "readAsArrayBuffer",
    "connect",
    "fnConnect",
    "fnError",
    "ws",
    "WebSocket",
    "onopen",
    "event",
    "onmessage",
    "push",
    "length",
    "onerror",
    "onclose",
    "send"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "var ByteBuffer = require(\"bytebuffer\");\nvar ProtoBuf = require(\"protobuf\");\n\nvar SocketState = {\n    UnInit : 0,\n    Linking : 1,\n    Linked : 2,\n    Close : 3,\n}\n\nvar lwebsocket = cc.Class({\n    extends: cc.Component,\n    statics: {\n        ip : \"\",\n        port : 0,\n        reader : null,\n        socket : null,\n        state : SocketState.UnInit,\n        msgdispatch : null,\n        queue : null,\n        working : false,\n\n        init : function(){\n            var self = this;\n            this.reader = new FileReader();\n            this.reader.addEventListener( \"loadend\", function(){\n                var data = this.result;\n                var buffer = new ByteBuffer();\n                buffer.append( data )\n                buffer.flip();\n                var len = buffer.readShort();\n                var head = buffer.readString( len );\n                console.log(\"response text msg: \" + head);\n                self.msgdispatch.dispatch( head, buffer.toBuffer() )\n                self.working = false;\n                self.domessage();\n            });\n\n            this.queue = new Array();\n            this.msgdispatch = require(\"msgdispatch\");\n        },\n        domessage : function () {\n            if(!this.working){\n                var data = this.queue[0];\n                if (data != null){\n                    this.working = true;\n                    this.queue.shift();\n                    this.reader.readAsArrayBuffer(data);\n                }\n            }\n        },\n        connect:function(ip, port, fnConnect, fnError) {\n            var self = this;\n            this.ip = ip;\n            this.port = port;\n            var ws = new WebSocket('ws://'+this.ip+':'+this.port+'/ws');\n            ws.onopen = function (event) {\n                console.log(\"Send Text WS was opened.\");\n                self.state = SocketState.Linked;\n                if( fnConnect ){\n                    fnConnect()\n                }\n            };\n            ws.onmessage = function (event) {\n                // console.log(\"response text msg: \" + event.data);\n                self.queue.push( event.data );\n                if(self.queue.length > 0){\n                    self.domessage();\n                }\n            };\n            ws.onerror = function (event) {\n                console.log(\"Send Text fired an error\");\n                self.state = SocketState.Close;\n            };\n            ws.onclose = function (event) {\n                console.log(\"WebSocket instance closed.\");\n                self.state = SocketState.Close;\n                if(fnError){\n                    fnError()\n                } \n            };\n            this.socket = ws;\n        },\n        send : function(buffer){\n            this.socket.send(buffer);\n        },\n    },\n});\n\n// var ProtoBuf = require(\"protobuf\");\n// var ByteBuffer = require(\"bytebuffer\");\n\n\n// var LWebSocket = function(addr, port){\n//     this.address = addr;\n//     this.port = port;\n//     this.callback = null;\n//     this.state = 0; // 0 un init 1 unlink 2 linked 3 linking\n\n//     var queue = new Array();\n//     this.reader = new FileReader();\n\n//     var working = false;\n//     var doMessage;\n//     var msgdispatch = require(\"msgdispatch\");\n//     this.reader.addEventListener(\"loadend\", function() {\n//         // reader.result contains the contents of blob as a typed array\n//         var data = this.result;\n//         var ndata = new ByteBuffer();\n//         ndata.append( data );\n//         ndata.flip();\n\n//         var len = ndata.readShort();\n//         var head = ndata.readString(len);\n//         console.log(\"response text msg: \" + head);\n//         msgdispatch.dispatch(head, ndata.toBuffer());\n//         working = false;\n//         doMessage();\n//     });\n\n//     var c = this.reader;\n//     doMessage = function(){\n//         if(!working){\n//             var data = queue[0];\n//             if (data != null){\n//                 working = true;\n//                 queue.shift();\n//                 c.readAsArrayBuffer(data);\n//             }\n//         }\n//     }\n\n//     var self = this;\n    \n\n//     this.send = function(buffer){\n//         this.socket.send(buffer);\n//     };\n\n//     this.connect = function(){\n//         self.state = 3;\n//         var ws = new WebSocket('ws://'+self.address+':'+self.port+'/ws');\n//         ws.onopen = function (event) {\n//             console.log(\"Send Text WS was opened.\");\n//             self.state = 2;\n//             require('Common').reSetTimes();\n//             if(self.callback != null){\n//                 self.callback.env[ self.callback.func ]();\n//             }\n//             self.callback = null;\n//         };\n//         ws.onmessage = function (event) {\n//             // console.log(\"response text msg: \" + event.data);\n//             queue.push( event.data );\n//             if(queue.length > 0){\n//                 doMessage();\n//             }\n//         };\n//         ws.onerror = function (event) {\n//             console.log(\"Send Text fired an error\");\n//         };\n//         ws.onclose = function (event) {\n//             console.log(\"WebSocket instance closed.\");\n//             self.state = 1; \n//             require('Common').reLogin();\n//         };\n//         this.socket = ws;\n//     }\n\n//     this.registerCallback = function( func, env ){\n//         var obj = {env:env, func: func};\n//         self.callback = obj;\n//     };\n    \n// }\n\n// module.exports = LWebSocket;\n\n// cc.Class({\n//     name: \"Lwebsocket\",\n//     extends: cc.Component,\n//     properties: {\n//     \taddress: \"\",\n//     \tport: 0,\n//     \tsocket: null,\n//     },\n\n//     ctor: function( addr, port ){\n//     \tthis.address = addr;\n//     \tthis.port = port;\n\n//     \tvar ws = new WebSocket('ws://'+addr+':'+port+'/ws');\n//     \tws.onopen = function (event) {\n//             console.log(\"Send Text WS was opened.\");\n//         };\n//         ws.onmessage = function (event) {\n//             console.log(\"response text msg: \" + event.data);\n//             var reader = new FileReader();\n//             reader.addEventListener(\"loadend\", function() {\n//                // reader.result contains the contents of blob as a typed array\n//                var data = this.result;\n//                var ndata = new ByteBuffer();\n//                ndata.append( data );\n//                ndata.flip();\n//                var len = ndata.readShort();\n//                var head = ndata.readString(len);\n//                m.dispatch(head, ndata.toBuffer());\n//             });\n//             reader.readAsArrayBuffer(event.data);\n\n//         };\n//          ws.onerror = function (event) {\n//              console.log(\"Send Text fired an error\");\n//          };\n//          ws.onclose = function (event) {\n//              console.log(\"WebSocket instance closed.\");\n//          };\n//          this.socket = ws;\n//     }\n// })"
  ]
}